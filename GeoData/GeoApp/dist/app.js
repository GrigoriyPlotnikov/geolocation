/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/animator.js":
/*!****************************!*\
  !*** ./src/js/animator.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Animator\": () => (/* binding */ Animator)\n/* harmony export */ });\n﻿// @ts-check\r\n\r\n//all credits to JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n/**\r\n * Handles animations and transitions\r\n */\r\nclass Animator {\r\n  /**\r\n   * Create an instance of the animation helper\r\n   */\r\n  constructor() {\r\n    /**\r\n     * True when an animation is in effect\r\n     * @type {boolean}\r\n     */\r\n    this._transitioning = false;\r\n    /**\r\n     * The name of the beginning animation\r\n     * @type {string}\r\n     */\r\n    this._begin = null;\r\n    /**\r\n     * The name of the ending animation\r\n     * @type {string}\r\n     */\r\n    this._end = null;\r\n  }\r\n\r\n  /**\r\n   * True when animation is in effect\r\n   * @returns {boolean} True if animation is happening\r\n   */\r\n  get transitioning() {\r\n    return this._transitioning;\r\n  }\r\n\r\n  /**\r\n   * True when ready to complete second part of animation\r\n   * @returns {boolean} True if there is a second animation to fire\r\n   */\r\n  get animationReady() {\r\n    return !!this._end;\r\n  }\r\n\r\n  /**\r\n   * Kicks off a new animation (old slide)\r\n   * @param {string} animationName Name of the animation\r\n   * @param {HTMLDivElement} host The div to be animated\r\n   * @param {Function} callback Function to call when the animation completes\r\n   */\r\n  beginAnimation(animationName, host, callback) {\r\n    this._transitioning = true;\r\n    this._begin = `anim-${animationName}-begin`;\r\n    this._end = `anim-${animationName}-end`;\r\n    const animationEnd = () => {\r\n      host.removeEventListener(\"animationend\", animationEnd);\r\n      host.classList.remove(this._begin);\r\n      this._transitioning = false;\r\n      callback();\r\n    }\r\n    host.addEventListener(\"animationend\", animationEnd, false);\r\n    host.classList.add(this._begin);\r\n  }\r\n\r\n  /**\r\n   * Kicks off the final animation (new slide)\r\n   * @param {HTMLDivElement} host The div to animate\r\n   */\r\n  endAnimation(host) {\r\n    this._transitioning = true;\r\n    const animationEnd = () => {\r\n      host.removeEventListener(\"animationend\", animationEnd);\r\n      host.classList.remove(this._end);\r\n      this._transitioning = false;\r\n      this._begin = null;\r\n      this._end = null;\r\n    }\r\n    host.addEventListener(\"animationend\", animationEnd, false);\r\n    host.classList.add(this._end);\r\n  }\r\n}\n\n//# sourceURL=webpack://geoapp/./src/js/animator.js?");

/***/ }),

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _navigator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./navigator.js */ \"./src/js/navigator.js\");\n/* harmony import */ var _controls_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./controls.js */ \"./src/js/controls.js\");\n﻿// initial code from JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n\r\n\r\nconst app = async () => {\r\n  (0,_navigator_js__WEBPACK_IMPORTED_MODULE_0__.registerDeck)();\r\n  (0,_controls_js__WEBPACK_IMPORTED_MODULE_1__.registerControls)();\r\n};\r\n\r\ndocument.addEventListener('DOMContentLoaded', app);\n\n//# sourceURL=webpack://geoapp/./src/js/app.js?");

/***/ }),

/***/ "./src/js/controls.js":
/*!****************************!*\
  !*** ./src/js/controls.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Controls\": () => (/* binding */ Controls),\n/* harmony export */   \"registerControls\": () => (/* binding */ registerControls)\n/* harmony export */ });\n/* harmony import */ var _navigator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./navigator.js */ \"./src/js/navigator.js\");\n/* harmony import */ var _dataBinding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataBinding.js */ \"./src/js/dataBinding.js\");\n﻿// @ts-check\r\n\r\n// idea by JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n\r\n\r\n/**\r\n * Custom element that renders controls to navigate the deck\r\n * @extends {HTMLElement}\r\n */\r\nclass Controls extends HTMLElement {\r\n\r\n  /**\r\n   * Create a new instance of controls\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * The related Navigator instance (deck) to control\r\n     * @type {Navigator}\r\n     */\r\n    this._deck = null;\r\n\r\n    /**\r\n     * direct links to control nodes\r\n     * @type {Object.<string, HTMLAnchorElement>}\r\n     * */\r\n    this._controlRef = {}\r\n\r\n    /**\r\n     * Data binding helper\r\n     * @type {DataBinding}\r\n     */\r\n    this._dataBinding = new _dataBinding_js__WEBPACK_IMPORTED_MODULE_1__.DataBinding();\r\n  }\r\n\r\n  /**\r\n   * Called when the element is inserted into the DOM. Used to fetch the template\r\n   */\r\n  async connectedCallback() {\r\n    const response = await fetch(`./templates/controls.html`);\r\n    this._template = await response.text();\r\n  }\r\n\r\n  /**\r\n   * Called when navigator have screens\r\n   *  used to from ui and wire into the related Navigator instance.\r\n   * */\r\n  formLinks() {\r\n    this.innerHTML = '';\r\n    const host = document.createElement('div');\r\n    host.innerHTML = this._template;\r\n\r\n    /**\r\n     * @typedef {object} Screenlink\r\n     * @property {string} route route\r\n     * @property {string} head head\r\n     */\r\n\r\n    /**\r\n     * @typedef {object} ScreenlinkContext\r\n     * @property {Screenlink[]} screens \r\n     */\r\n\r\n    /**\r\n     * Context for data bind\r\n     * @type {ScreenlinkContext}\r\n     */\r\n    const context = {\r\n      screens: /** @type {Screenlink[]} **/ []\r\n    };\r\n\r\n    if (this._deck.screens) {\r\n      for (const root in this._deck.screens) {\r\n        context.screens.push({ route: root, head: this._deck.screens[root].head});\r\n      }\r\n    }\r\n\r\n    this._dataBinding.bindAll(host, context);\r\n\r\n    host.querySelectorAll('a').forEach(anchor => {\r\n      const route = anchor.hash.substr(1);\r\n      this._controlRef[route] = anchor;\r\n      anchor.addEventListener('click', (ev) => { ev.preventDefault(); this._deck.jumpTo(route) });\r\n    });\r\n\r\n    this.appendChild(host);\r\n  }\r\n\r\n  /**\r\n   * Get the list of attributes to watch\r\n   * @returns {string[]} List of observable attributes\r\n   */\r\n  static get observedAttributes() {\r\n    return ['deck'];\r\n  }\r\n\r\n  /**\r\n   * Called when the attribute is set\r\n   * @param {string} attrName Name of the attribute that was set\r\n   * @param {string} oldVal The old attribute value\r\n   * @param {string} newVal The new attribute value\r\n   */\r\n  async attributeChangedCallback(attrName, oldVal, newVal) {\r\n    if (attrName === 'deck') {\r\n      if (oldVal !== newVal) {\r\n        this._deck = /** @type {Navigator} */(document.getElementById(newVal));\r\n        this._deck.addEventListener('screenchanged', () => this.refreshState());\r\n        this._deck.addEventListener('screensloaded', () => this.formLinks());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enables/disables buttons based on screen in the deck\r\n   */\r\n  refreshState() {\r\n    if (this._deck.route && this._controlRef[this._deck.route]) {\r\n      this._controlRef[this._deck.route].classList.add('disabled');\r\n    }\r\n\r\n    if (this._deck.routePrevious && this._controlRef[this._deck.routePrevious]) {\r\n      this._controlRef[this._deck.routePrevious].classList.remove('disabled');\r\n    }\r\n  }\r\n}\r\n\r\n/** Register the custom slide-controls element */\r\nconst registerControls = () => customElements.define('screen-controls', Controls);\n\n//# sourceURL=webpack://geoapp/./src/js/controls.js?");

/***/ }),

/***/ "./src/js/dataBinding.js":
/*!*******************************!*\
  !*** ./src/js/dataBinding.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DataBinding\": () => (/* binding */ DataBinding)\n/* harmony export */ });\n/* harmony import */ var _observable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable.js */ \"./src/js/observable.js\");\n﻿// @ts-check\r\n///idea by JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n\r\n/**\r\n * Class supports data-binding operations\r\n */\r\nclass DataBinding {\r\n\r\n  /**\r\n   * Simple evaluation\r\n   * @param {string} js The JavaScript to evaluate \r\n   */\r\n  execute(js) {\r\n    return eval(js);\r\n  }\r\n\r\n  /**\r\n   * Evaluates JavaScript with a constrained context (scope)\r\n   * @param {string} src The JavaScript to evaluate \r\n   * @param {object} context The context (data) to evaluate with\r\n   * @returns {object} The result of the evaluation \r\n   */\r\n  executeInContext(src, context, attachBindingHelpers = false) {\r\n    if (attachBindingHelpers) {\r\n      context.observable = this.observable;\r\n      context.computed = this.computed;\r\n      context.bindValue = this.bindValue;\r\n    }\r\n    return this.execute.call(context, src);\r\n  }\r\n\r\n  /**\r\n   * A simple observable implementation\r\n   * @param {object} value Any value to observe\r\n   * @returns {Observable} The observable instance to use\r\n   */\r\n  observable(value) {\r\n    return new _observable_js__WEBPACK_IMPORTED_MODULE_0__.Observable(value);\r\n  }\r\n\r\n  /**\r\n   * Creates an observed computed property\r\n   * @param {function} calculation Calculated value \r\n   * @param {Observable[]} deps The list of dependent observables\r\n   * @returns {Computed} The observable computed value \r\n   */\r\n  computed(calculation, deps) {\r\n    return new _observable_js__WEBPACK_IMPORTED_MODULE_0__.Computed(calculation, deps);\r\n  }\r\n\r\n  /**\r\n   * Binds an input element to an observable value\r\n   * @param {HTMLInputElement} input The element to bind to \r\n   * @param {Observable} observable The observable instance to bind to \r\n   */\r\n  bindValue(input, observable) {\r\n    const initialValue = observable.value;\r\n    input.value = initialValue;\r\n    observable.subscribe(() => input.value = observable.value);\r\n    /**\r\n     * Converts the values \r\n     * @param {object} value \r\n     */\r\n    let converter = value => value;\r\n    if (typeof initialValue === \"number\") {\r\n      converter = num => isNaN(num = parseFloat(num)) ? 0 : num;\r\n    }\r\n    input.onkeyup = () => {\r\n      observable.value = converter(input.value);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {HTMLElement} elem The parent element \r\n   * @param {object} context The context to use for binding \r\n   */\r\n  bindAll(elem, context) {\r\n    this.bindLists(elem, context);\r\n    this.bindObservables(elem, context);\r\n  }\r\n\r\n  /**\r\n   * Searches for \"data-bind\" attribute to data-bind observables\r\n   * @param {HTMLElement} elem The parent element to search \r\n   * @param {object} context The context to use for binding \r\n   */\r\n  bindObservables(elem, context) {\r\n    const dataBinding = elem.querySelectorAll(\"[data-bind]\");\r\n    dataBinding.forEach(elem => {\r\n      this.bindValue(\r\n                /** @type {HTMLInputElement} */(elem),\r\n        context[elem.getAttribute(\"data-bind\")]);\r\n    });\r\n  }\r\n\r\n//  <div>\r\n//  <div repeat=\"errors\"> <label>Ошибка: <span name=\"error\">{{ item }}</span></label></div>\r\n//</div>\r\n  /**\r\n   * Searches for \"repeat\" attribute to data-bind lists\r\n   * @param {HTMLElement} elem The parent element to search \r\n   * @param {object} context The context to use for binding \r\n   */\r\n  bindLists(elem, context) {\r\n    const listBinding = elem.querySelectorAll(\"[repeat]\");\r\n    listBinding.forEach(elem => {\r\n      const parent = elem.parentElement;\r\n      const expression = elem.getAttribute(\"repeat\");\r\n      elem.classList.remove('hidden');\r\n      elem.removeAttribute(\"repeat\");\r\n      const template = elem.outerHTML;\r\n      elem.classList.add('hidden');\r\n      elem.setAttribute(\"repeat\", expression);\r\n      while (parent.lastElementChild) {\r\n        parent.removeChild(parent.lastElementChild);\r\n      }\r\n      context[expression].forEach(item => {\r\n        let newTemplate = `${template}`;\r\n        const matches = newTemplate.match(/\\{\\{([^\\}]*?)\\}\\}/g);\r\n        if (matches) {\r\n          matches.forEach(match => {\r\n            match = match.replace(\"{{\", \"\").replace(\"}}\", \"\");\r\n            const value = this.executeInContext(`this.${match}`, { item });\r\n            newTemplate = newTemplate.replace(`{{${match}}}`, value);\r\n          });\r\n          parent.innerHTML += newTemplate;\r\n        }\r\n      });\r\n      parent.appendChild(elem);\r\n    });\r\n  }\r\n}\n\n//# sourceURL=webpack://geoapp/./src/js/dataBinding.js?");

/***/ }),

/***/ "./src/js/loadScreens.js":
/*!*******************************!*\
  !*** ./src/js/loadScreens.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"loadScreens\": () => (/* binding */ loadScreens)\n/* harmony export */ });\n/* harmony import */ var _screen_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./screen.js */ \"./src/js/screen.js\");\n/* harmony import */ var _dataBinding_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dataBinding.js */ \"./src/js/dataBinding.js\");\n﻿//@ts-check\r\n\r\n// initial code from JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n\r\n\r\n/**\r\n * Load a single screen\r\n * @param {string} screenRoute The name\r\n * @returns {Promise<Screen>} The screen \r\n */\r\nasync function loadScreen(screenRoute) {\r\n  const response = await fetch(`./screens/${screenRoute}.html`);\r\n  const screen = await response.text();\r\n  return new _screen_js__WEBPACK_IMPORTED_MODULE_0__.Screen(screen, screenRoute);\r\n}\r\n\r\n/**\r\n * @returns {Promise<Screen[]>} Loaded screens\r\n */\r\nasync function loadScreens() {\r\n  const slides = []\r\n  slides.push(await loadScreen('home'));\r\n  slides.push(await loadScreen('ip'));\r\n  slides.push(await loadScreen('locations'));\r\n  return slides;\r\n}\n\n//# sourceURL=webpack://geoapp/./src/js/loadScreens.js?");

/***/ }),

/***/ "./src/js/navigator.js":
/*!*****************************!*\
  !*** ./src/js/navigator.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Navigator\": () => (/* binding */ Navigator),\n/* harmony export */   \"registerDeck\": () => (/* binding */ registerDeck)\n/* harmony export */ });\n/* harmony import */ var _loadScreens_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loadScreens.js */ \"./src/js/loadScreens.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./router.js */ \"./src/js/router.js\");\n/* harmony import */ var _animator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./animator.js */ \"./src/js/animator.js\");\n/* harmony import */ var _screen_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./screen.js */ \"./src/js/screen.js\");\n﻿// @ts-check\r\n\r\n// initial code from JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The main class that handles rendering the screen deck\r\n * @extends {HTMLElement}\r\n */\r\nclass Navigator extends HTMLElement {\r\n  /**\r\n * Create an instance of the custom navigator element\r\n */\r\n  constructor() {\r\n    super();\r\n    /**\r\n     * The related animation control\r\n     * @type {Animator}\r\n     */\r\n    this._animator = new _animator_js__WEBPACK_IMPORTED_MODULE_2__.Animator();\r\n    /**\r\n     * The related router control\r\n     * @type {Router}\r\n     */\r\n    this._router = new _router_js__WEBPACK_IMPORTED_MODULE_1__.Router();\r\n    /**\r\n     * The last known route\r\n     * @type {string}\r\n     */\r\n    this._route = null;\r\n    /**\r\n     * The previous known route\r\n     * @type {string}\r\n     */\r\n    this._routePrevious = null;\r\n    /** \r\n     *  Known screens\r\n     *  @type {Object.<string, Screen>}\r\n     * */\r\n    this._screens = {};\r\n    /**\r\n     * Custom event raised when the current screen changes\r\n     * @type {CustomEvent}\r\n     */\r\n    //todo: wtf CustomEvent maybe pass routes screens\r\n    this.screenChangedEvent = new CustomEvent('screenchanged', {\r\n      bubbles: true,\r\n      cancelable: false\r\n    });\r\n    this.screensLoadedEvent = new CustomEvent('screensloaded', {\r\n      bubbles: true,\r\n      cancelable: false\r\n    });\r\n    this._router.eventSource.addEventListener('routechanged', () => {\r\n      if (this._route !== this._router.getRoute()) {\r\n        const route = this._router.getRoute();\r\n        if (route) {\r\n          this.jumpTo(route);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main scrren navigation: jump to specific screen\r\n   * @param {string} route The path of the screen to navigate to\r\n   */\r\n  jumpTo(route) {\r\n    if (this._animator.transitioning) {\r\n      return;\r\n    }\r\n    if (this._route === route)\r\n      return;\r\n\r\n    if (this._screens[route]) {\r\n      this._routePrevious = this._route;\r\n      this._route = route;\r\n      this.innerHTML = '';\r\n      this.appendChild(this.currentScreen.html);\r\n      if (this._routePrevious)\r\n        this._router.setRoute(route);\r\n      document.title = `${this.currentScreen.title}`;\r\n      this.dispatchEvent(this.screenChangedEvent);\r\n      this.currentScreen.dataBindExecute();\r\n      if (this._animator.animationReady) {\r\n        this._animator.endAnimation(this.querySelector('div'));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the list of observed attributes\r\n   * @returns {string[]} The list of attributes to watch\r\n   */\r\n  static get observedAttributes() {\r\n    return ['start'];\r\n  }\r\n\r\n  /**\r\n   * Called when an attribute changes\r\n   * @param {string} attrName \r\n   * @param {string} oldVal \r\n   * @param {string} newVal \r\n   */\r\n  async attributeChangedCallback(attrName, oldVal, newVal) {\r\n    if (attrName === 'start') {\r\n      if (oldVal !== newVal) {\r\n        for (const scr of await (0,_loadScreens_js__WEBPACK_IMPORTED_MODULE_0__.loadScreens)()) {\r\n          this._screens[scr.route] = scr;\r\n        }\r\n        this.dispatchEvent(this.screensLoadedEvent);\r\n        let route = this._router.getRoute();\r\n        if (route) {\r\n          this.jumpTo(route);\r\n        } else {\r\n          this.jumpTo(newVal);\r\n        }\r\n        this._title = document.querySelectorAll('title')[0];\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n  * Current screen\r\n  * @returns {Screen} The current screen\r\n  */\r\n  get currentScreen() {\r\n    return this._screens ? this._screens[this._route] : null;\r\n  }\r\n\r\n  /**\r\n  * All known screens\r\n  * @returns {Object.<string,Screen>} Screens dictionary\r\n  */\r\n  get screens() {\r\n    return this._screens;\r\n  }\r\n\r\n  /**\r\n   * Get the current route\r\n   * @returns {string} The current route name\r\n   */\r\n  get route() {\r\n    return this._route;\r\n  }\r\n\r\n  /**\r\n   * Get the previous route\r\n   * @returns {string} The previous route name\r\n   */\r\n  get routePrevious() {\r\n    return this._routePrevious;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Register the custom screen-deck component\r\n */\r\nconst registerDeck = () => customElements.define('screen-deck', Navigator);\n\n//# sourceURL=webpack://geoapp/./src/js/navigator.js?");

/***/ }),

/***/ "./src/js/observable.js":
/*!******************************!*\
  !*** ./src/js/observable.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Computed\": () => (/* binding */ Computed),\n/* harmony export */   \"Observable\": () => (/* binding */ Observable)\n/* harmony export */ });\n﻿// @ts-check\r\n\r\n// all credits to JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n/**\r\n * @callback ListenerCallback\r\n * @param {object} newVal The new value generated\r\n */\r\n\r\n/**\r\n * Represents an observable value\r\n */\r\nclass Observable {\r\n\r\n  /**\r\n   * Creates a new observable and initializes with a value\r\n   * @param {object} value \r\n   */\r\n  constructor(value) {\r\n    /** \r\n     * Subscriptions\r\n     * @type {ListenerCallback[]}\r\n     */\r\n    this._listeners = [];\r\n    /**\r\n     * The value\r\n     * @type {object}\r\n     */\r\n    this._value = value;\r\n  }\r\n\r\n  /**\r\n   * Notifies subscribers of new value\r\n   */\r\n  notify() {\r\n    this._listeners.forEach(listener => listener(this._value));\r\n  }\r\n\r\n  /**\r\n   * Subscribe to listen for changes\r\n   * @param {ListenerCallback} listener \r\n   */\r\n  subscribe(listener) {\r\n    this._listeners.push(listener);\r\n  }\r\n\r\n  /**\r\n   * The value of the observable\r\n   * @returns {object} The current value\r\n   */\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the observable\r\n   * @param {object} val The new value\r\n   */\r\n  set value(val) {\r\n    if (val !== this._value) {\r\n      this._value = val;\r\n      this.notify();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Observable computed properties\r\n */\r\nclass Computed extends Observable {\r\n  /**\r\n   * Creates a new observable and initializes with a value\r\n   * @param {Function} value Initial computation\r\n   * @param {Observable[]} deps Dependencies \r\n   */\r\n  constructor(value, deps) {\r\n    super(value());\r\n    const listener = () => {\r\n      this._value = value();\r\n      this.notify();\r\n    }\r\n    deps.forEach(dep => dep.subscribe(listener));\r\n  }\r\n\r\n  /**\r\n   * Gets the value of the observable\r\n   * @returns {object} The value\r\n   */\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  /**\r\n   * Sets the value of the observable\r\n   * @param {object} _ The new value\r\n   * @throws \"Cannot set computed property\"\r\n   */\r\n  set value(_) {\r\n    throw \"Cannot set computed property\";\r\n  }\r\n}\n\n//# sourceURL=webpack://geoapp/./src/js/observable.js?");

/***/ }),

/***/ "./src/js/router.js":
/*!**************************!*\
  !*** ./src/js/router.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Router\": () => (/* binding */ Router)\n/* harmony export */ });\n﻿// @ts-check\r\n\r\n// all credits to JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n/**\r\n * Handles routing for the app\r\n */\r\nclass Router {\r\n\r\n  /**\r\n   * Create a new Router instance\r\n   */\r\n  constructor() {\r\n    /**\r\n     * Arbitrary element to source events\r\n     * @type {HTMLDivElement}\r\n     */\r\n    this._eventSource = document.createElement(\"div\");\r\n    /**\r\n     * Custom event raised when the route changes\r\n     * @type {CustomEvent}\r\n     */\r\n    this._routeChanged = new CustomEvent(\"routechanged\", {\r\n      bubbles: true,\r\n      cancelable: false\r\n    });\r\n    /**\r\n     * The current route\r\n     * @type {string}\r\n     */\r\n    this._route = null;\r\n    window.addEventListener(\"popstate\", () => {\r\n      if (this.getRoute() !== this._route) {\r\n        this._route = this.getRoute();\r\n        this._eventSource.dispatchEvent(this._routeChanged);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the event source\r\n   * @returns {HTMLDivElement} The event source div\r\n   */\r\n  get eventSource() {\r\n    return this._eventSource;\r\n  }\r\n\r\n  /**\r\n   * Set the current route\r\n   * @param {string} route The route name \r\n   */\r\n  setRoute(route) {\r\n    history.pushState({}, '',\r\n      document.location.protocol + '//' + document.location.host +\r\n      document.location.pathname + '#' + route);\r\n    this._route = route;\r\n  }\r\n\r\n  /**\r\n   * Get the current route\r\n   * @returns {string} The current route name\r\n   */\r\n  getRoute() {\r\n    return window.location.hash.substr(1).replace(/\\//ig, \"/\");\r\n  }\r\n}\n\n//# sourceURL=webpack://geoapp/./src/js/router.js?");

/***/ }),

/***/ "./src/js/screen.js":
/*!**************************!*\
  !*** ./src/js/screen.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Screen\": () => (/* binding */ Screen)\n/* harmony export */ });\n/* harmony import */ var _dataBinding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dataBinding.js */ \"./src/js/dataBinding.js\");\n﻿// @ts-check\r\n\r\n//initial code from JeremyLikness https://github.com/JeremyLikness/vanillajs-deck/\r\n\r\n\r\n\r\n/** \r\n * Represents a screen\r\n * */\r\nclass Screen {\r\n\r\n  /**\r\n   * @constructor\r\n   * @param {string} text - The content of the screen\r\n   * @param {string} route - The route of the screen\r\n   */\r\n  constructor(text, route) {\r\n    /**\r\n     * Route for the screen\r\n     * @type {string}\r\n     */\r\n    this._route = route;\r\n    /** \r\n     * Internal text representation of the screen\r\n     * @type {string}\r\n     */\r\n    this._text = text;\r\n    /**\r\n     * Data binding helper\r\n     * @type {DataBinding}\r\n     */\r\n    this._dataBinding = new _dataBinding_js__WEBPACK_IMPORTED_MODULE_0__.DataBinding();\r\n    /** \r\n     * The HTML DOM hosting the screen contents\r\n     * @type {HTMLDivElement}\r\n     */\r\n    this._html = document.createElement('div');\r\n    this._html.innerHTML = text;\r\n    /**\r\n     * The title of the screen\r\n     * @type {string}\r\n     */\r\n    this._title = this._html.querySelectorAll(\"title\")[0].innerText;\r\n\r\n    /**\r\n     * The link name of the screen\r\n     * @type {string}\r\n     */\r\n    this._head = this._html.querySelector(\"meta[name='controlhead']\").getAttribute(\"content\");\r\n\r\n    /**\r\n     * @typedef {object} SceenContext\r\n     * @property {HTMLDivElement} html DOM hosting the screen contents\r\n     * @property {DataBinding} dataBinding Data binding helper\r\n     * @property {boolean} dataBound Data binding helper\r\n     * @property {string} search The search parameter\r\n     */\r\n    /**\r\n     * @type {SceenContext}\r\n     * */\r\n    this._context = {\r\n      html: this._html,\r\n      dataBinding: this._dataBinding,\r\n      dataBound: false,\r\n      search: ''\r\n    };\r\n\r\n    /** @type{NodeListOf<HTMLElement>} */\r\n    const transition = (this._html.querySelectorAll(\"transition\"));\r\n    if (transition.length) {\r\n      /**\r\n       * The name of the animation to use for transitions\r\n       * @type {string}\r\n       */\r\n      this._transition = transition[0].innerText;\r\n    }\r\n    else {\r\n      this._transition = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * allows to bind query results if any\r\n   */\r\n  async dataBindExecute() {\r\n    // execute any scripts\r\n    const script = this._html.querySelector(\"script\");\r\n    if (script && !this._context.dataBound) {\r\n      this._dataBinding.executeInContext(script.innerText, this._context, true);\r\n      this._context.dataBound = true;\r\n      //if (this._context.promise)\r\n        //await this._context.promise;\r\n      //this._dataBinding.bindAll(this._html, this._context);\r\n    }\r\n    if (this._context.search)\r\n      history.replaceState({ }, '',\r\n        document.location.protocol + '//' + document.location.host +\r\n        document.location.pathname + '?' + this._context.search + document.location.hash);\r\n  }\r\n\r\n  /** \r\n   * The screen transition\r\n   * @returns {string} The transition name\r\n   */\r\n  get transition() {\r\n    return this._transition;\r\n  }\r\n\r\n  /** \r\n   * The screen title\r\n   * @returns {string} The screen title\r\n   */\r\n  get title() {\r\n    return this._title;\r\n  }\r\n\r\n  /** \r\n   * The link name of the screen\r\n   * @returns {string} The name for screen links\r\n   */\r\n  get head() {\r\n    return this._head;\r\n  }\r\n\r\n  /** \r\n   * The screen route\r\n   * @returns {string} The screen route\r\n   */\r\n  get route() {\r\n    return this._route;\r\n  }\r\n\r\n  /**\r\n   * The HTML DOM node for the slide\r\n   * @returns {HTMLDivElement} The HTML content\r\n   */\r\n  get html() {\r\n    return this._html;\r\n  }\r\n}\n\n//# sourceURL=webpack://geoapp/./src/js/screen.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;